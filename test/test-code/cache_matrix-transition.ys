.pos 0

irmovq stack,%rsp
call transpose
call flush_cache
halt

transpose:
    irmovq $1,%rbx
    irmovq $8, %r8
    irmovq $64,%r9

    irmovq $0, %rcx # col-counter
    irmovq $0, %rdx # row-counter
    irmovq $0, %rsi # i
    irmovq $0, %rdi # j

    # 外层循环，遍历矩阵行
    Outer_Loop:
        rrmovq %rcx, %rdi
        rrmovq %rdx, %rsi
        addq %rcx, %rsi
        # 内层循环，遍历矩阵列
        Inner_Loop:
            mrmovq matrix(%rsi), %r10 # get i
            mrmovq matrix(%rdi), %r11 # get j
            # swap
            rmmovq %r11, matrix(%rsi)
            rmmovq %r10, matrix(%rdi)

            addq %r8, %rdi # add 8
            addq %r9, %rsi # add 64
            rrmovq %rdi, %r12
            subq %r9, %r12
            jne Inner_Loop
        addq %r8, %rcx
        addq %r9, %rdx
        rrmovq %rcx, %r12
        subq %r9, %r12
        jne Outer_Loop
    ret

flush_cache:
    irmovq $0, %rbx
    irmovq $1, %rdx
    irmovq $8, %r8
    irmovq $2048, %r9
L1:
    mrmovq (%rbx), %rax
    rmmovq %rax, (%rbx)
    addq %rdx, %rbx
    rrmovq %rbx, %rax
    subq %r9, %rax
    jne L1
    ret

.align 64
matrix:
.quad 1
.quad 2
.quad 3
.quad 4
.quad 5
.quad 6
.quad 7
.quad 8
.quad 9
.quad 10
.quad 11
.quad 12
.quad 13
.quad 14
.quad 15
.quad 16
.quad 17
.quad 18
.quad 19
.quad 20
.quad 21
.quad 22
.quad 23
.quad 24
.quad 25
.quad 26
.quad 27
.quad 28
.quad 29
.quad 30
.quad 31
.quad 32
.quad 33
.quad 34
.quad 35
.quad 36
.quad 37
.quad 38
.quad 39
.quad 40
.quad 41
.quad 42
.quad 43
.quad 44
.quad 45
.quad 46
.quad 47
.quad 48
.quad 49
.quad 50
.quad 51
.quad 52
.quad 53
.quad 54
.quad 55
.quad 56
.quad 57
.quad 58
.quad 59
.quad 60
.quad 61
.quad 62
.quad 63
.quad 64

.pos 0x800
stack:
